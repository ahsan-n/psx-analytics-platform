# OpenAPI Development Rules - PSX Analytics Platform

## OpenAPI Version & Standards
- **OpenAPI Version**: 3.0.3 (latest stable)
- **Schema First**: All API development starts with OpenAPI specification
- **Code Generation**: Generate types and clients from OpenAPI specs
- **Validation**: Contract validation at runtime and build time

## Project Structure

```
api/
├── specs/                  # OpenAPI specifications
│   ├── auth-service.yaml  # Authentication service API
│   ├── market-service.yaml # Market data service API
│   ├── portfolio-service.yaml # Portfolio service API
│   ├── analytics-service.yaml # Analytics service API
│   └── shared/            # Shared schemas and components
│       ├── common.yaml    # Common request/response types
│       ├── errors.yaml    # Error response schemas
│       └── auth.yaml      # Authentication schemas
├── generated/              # Generated code (gitignored)
│   ├── go/                # Go types and clients
│   ├── typescript/        # TypeScript types and clients
│   └── docs/              # Generated API documentation
└── tools/                  # OpenAPI tooling and scripts
    ├── codegen/           # Code generation scripts
    ├── validation/        # Schema validation tools
    └── mocks/             # Mock data generation
```

## OpenAPI Specification Standards

### File Organization
```yaml
# Good: Well-structured OpenAPI specification
openapi: 3.0.3
info:
  title: PSX Analytics Platform - Market Service API
  version: 1.0.0
  description: Market data and stock information service
  contact:
    name: API Support
    email: api@psxanalytics.com
  license:
    name: Proprietary
    url: https://psxanalytics.com/license

servers:
  - url: https://api.psxanalytics.com/v1
    description: Production server
  - url: https://staging-api.psxanalytics.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development

paths:
  /stocks/{symbol}/quote:
    get:
      summary: Get real-time stock quote
      operationId: getStockQuote
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{1,5}$'
          description: Stock symbol (1-5 uppercase letters)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockQuoteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    StockQuote:
      type: object
      required:
        - symbol
        - price
        - change
        - changePercent
        - volume
        - lastUpdated
      properties:
        symbol:
          type: string
          description: Stock symbol
          example: "AAPL"
        price:
          type: number
          format: float
          minimum: 0
          description: Current stock price
          example: 150.25
        change:
          type: number
          format: float
          description: Price change from previous close
          example: 2.50
        changePercent:
          type: number
          format: float
          description: Percentage change from previous close
          example: 1.69
        volume:
          type: integer
          minimum: 0
          description: Trading volume
          example: 1500000
        lastUpdated:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
      
    StockQuoteResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          description: Operation success status
          example: true
        data:
          $ref: '#/components/schemas/StockQuote'
        message:
          type: string
          description: Optional message
          example: "Quote retrieved successfully"
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
          example: "2024-01-15T10:30:00Z"

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
```

## Schema Design Principles

### Naming Conventions
```yaml
# Good: Consistent naming patterns
components:
  schemas:
    # Use PascalCase for schema names
    UserProfile:
      type: object
      properties:
        # Use camelCase for property names
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
        # Use descriptive names
        accountCreatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        # Use consistent types
        isActive:
          type: boolean
        subscriptionTier:
          type: string
          enum: [free, premium, professional, institutional]
```

### Data Types and Validation
```yaml
# Good: Proper data types and validation
components:
  schemas:
    StockOrder:
      type: object
      required:
        - symbol
        - quantity
        - orderType
        - side
      properties:
        symbol:
          type: string
          pattern: '^[A-Z]{1,5}$'
          minLength: 1
          maxLength: 5
          description: Stock symbol (1-5 uppercase letters)
          example: "AAPL"
        
        quantity:
          type: integer
          minimum: 1
          maximum: 1000000
          description: Number of shares to trade
          example: 100
        
        orderType:
          type: string
          enum: [market, limit, stop, stop_limit]
          description: Type of order
          example: "limit"
        
        side:
          type: string
          enum: [buy, sell]
          description: Order side
          example: "buy"
        
        limitPrice:
          type: number
          format: float
          minimum: 0.01
          maximum: 10000.00
          description: Limit price for limit orders
          example: 150.00
        
        stopPrice:
          type: number
          format: float
          minimum: 0.01
          maximum: 10000.00
          description: Stop price for stop orders
          example: 145.00
        
        timeInForce:
          type: string
          enum: [day, gtc, ioc, fok]
          default: "day"
          description: Time in force for the order"
          example: "day"
```

### Error Handling
```yaml
# Good: Comprehensive error response schemas
components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: '#/components/schemas/Error'
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        requestId:
          type: string
          format: uuid
          description: Unique request identifier for tracking
          example: "550e8400-e29b-41d4-a716-446655440000"
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code for programmatic handling
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid stock symbol format"
        details:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          description: Detailed validation errors
        field:
          type: string
          description: Field that caused the error
          example: "symbol"
    
    ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: Field name with validation error
          example: "email"
        message:
          type: string
          description: Validation error message
          example: "Invalid email format"
        value:
          type: string
          description: Invalid value provided
          example: "invalid-email"
        constraint:
          type: string
          description: Constraint that failed
          example: "email format"
```

## API Design Patterns

### RESTful Endpoints
```yaml
# Good: RESTful API design
paths:
  # Collection endpoints
  /stocks:
    get:
      summary: List stocks
      operationId: listStocks
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: sector
          in: query
          schema:
            type: string
          description: Filter by sector
        - name: search
          in: query
          schema:
            type: string
          description: Search by symbol or company name
      responses:
        '200':
          description: List of stocks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockListResponse'
    
    post:
      summary: Create new stock entry
      operationId: createStock
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStockRequest'
      responses:
        '201':
          description: Stock created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
  
  # Individual resource endpoints
  /stocks/{symbol}:
    get:
      summary: Get stock by symbol
      operationId: getStock
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{1,5}$'
      responses:
        '200':
          description: Stock information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
    
    put:
      summary: Update stock information
      operationId: updateStock
      security:
        - BearerAuth: []
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStockRequest'
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
    
    delete:
      summary: Delete stock
      operationId: deleteStock
      security:
        - BearerAuth: []
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stock deleted successfully
  
  # Sub-resource endpoints
  /stocks/{symbol}/quotes:
    get:
      summary: Get stock price history
      operationId: getStockQuotes
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 5d, 1m, 3m, 6m, 1y, 5y, max]
            default: "1m"
          description: Time period for historical data
        - name: interval
          in: query
          schema:
            type: string
            enum: [1m, 5m, 15m, 30m, 1h, 1d]
            default: "1d"
          description: Data interval
      responses:
        '200':
          description: Historical price data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockQuotesResponse'
```

### Pagination and Filtering
```yaml
# Good: Consistent pagination and filtering
components:
  schemas:
    PaginationParams:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number (1-based)
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Items per page
          example: 20
        sortBy:
          type: string
          description: Field to sort by
          example: "createdAt"
        sortOrder:
          type: string
          enum: [asc, desc]
          default: "desc"
          description: Sort order
          example: "desc"
    
    PaginationResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Stock'
          description: Array of items
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
    
    PaginationInfo:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 20
        total:
          type: integer
          description: Total number of items
          example: 150
        totalPages:
          type: integer
          description: Total number of pages
          example: 8
        hasNext:
          type: boolean
          description: Whether there are more pages
          example: true
        hasPrev:
          type: boolean
          description: Whether there are previous pages
          example: false
```

## Code Generation

### Go Code Generation
```bash
# Generate Go types and client from OpenAPI spec
#go:generate go run github.com/deepmap/oapi-codegen/cmd/oapi-codegen --package=api --generate=types,spec,server,client api/specs/market-service.yaml

# Generate go-zero API service
goctl api go -api api/specs/market-service.yaml -dir backend/market-service
```

### TypeScript Code Generation
```bash
# Generate TypeScript types and client
npx @openapitools/openapi-generator-cli generate \
  -i api/specs/market-service.yaml \
  -g typescript-fetch \
  -o frontend/src/generated/api \
  --additional-properties=supportsES6=true,typescriptThreePlus=true
```

### Documentation Generation
```bash
# Generate HTML documentation
npx @redocly/cli build-docs api/specs/market-service.yaml -o docs/api.html

# Generate Markdown documentation
npx @redocly/cli build-docs api/specs/market-service.yaml -o docs/api.md
```

## Validation and Testing

### Schema Validation
```yaml
# Good: Comprehensive validation rules
components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - confirmPassword
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: Username (3-50 characters, alphanumeric and underscore)
          example: "john_doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: Valid email address
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
          description: Password (8-128 chars, must contain lowercase, uppercase, number, and special char)
          example: "SecurePass123!"
        confirmPassword:
          type: string
          description: Password confirmation
          example: "SecurePass123!"
        firstName:
          type: string
          maxLength: 100
          description: First name
          example: "John"
        lastName:
          type: string
          maxLength: 100
          description: Last name
          example: "Doe"
        phoneNumber:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number in international format
          example: "+1234567890"
        dateOfBirth:
          type: string
          format: date
          description: Date of birth (YYYY-MM-DD)
          example: "1990-01-01"
        acceptTerms:
          type: boolean
          enum: [true]
          description: Must accept terms and conditions
          example: true
        marketingConsent:
          type: boolean
          description: Marketing communication consent
          example: false
```

### Response Examples
```yaml
# Good: Comprehensive response examples
components:
  examples:
    StockQuoteSuccess:
      summary: Successful stock quote response
      value:
        success: true
        data:
          symbol: "AAPL"
          price: 150.25
          change: 2.50
          changePercent: 1.69
          volume: 1500000
          marketCap: 2500000000000
          lastUpdated: "2024-01-15T10:30:00Z"
        message: "Quote retrieved successfully"
        timestamp: "2024-01-15T10:30:00Z"
    
    ValidationError:
      summary: Validation error response
      value:
        success: false
        error:
          code: "VALIDATION_ERROR"
          message: "Invalid input data"
          details:
            - field: "email"
              message: "Invalid email format"
              value: "invalid-email"
              constraint: "email format"
            - field: "password"
              message: "Password must be at least 8 characters"
              value: "123"
              constraint: "minimum length"
        timestamp: "2024-01-15T10:30:00Z"
        requestId: "550e8400-e29b-41d4-a716-446655440000"
    
    AuthenticationError:
      summary: Authentication error response
      value:
        success: false
        error:
          code: "UNAUTHORIZED"
          message: "Invalid or expired token"
        timestamp: "2024-01-15T10:30:00Z"
        requestId: "550e8400-e29b-41d4-a716-446655440000"
```

## Security and Authentication

### Security Schemes
```yaml
# Good: Comprehensive security configuration
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for external integrations
    
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.psxanalytics.com/oauth/authorize
          tokenUrl: https://auth.psxanalytics.com/oauth/token
          scopes:
            read:stocks: Read stock data
            write:portfolio: Manage portfolio
            admin:users: Admin user management

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /stocks/{symbol}/quote:
    get:
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      # ... rest of endpoint definition
```

## Definition of Done for OpenAPI Specifications
- [ ] OpenAPI 3.0.3 specification complete
- [ ] All endpoints documented with proper HTTP methods
- [ ] Request/response schemas defined and validated
- [ ] Error responses documented for all endpoints
- [ ] Authentication and authorization defined
- [ ] Examples provided for all schemas
- [ ] Schema validation rules implemented
- [ ] Code generation working for Go and TypeScript
- [ ] API documentation generated and reviewed
- [ ] Contract validation tests passing
- [ ] Backend and frontend integration complete
- [ ] API versioning strategy defined
- [ ] Rate limiting and throttling documented
- [ ] Security review completed
