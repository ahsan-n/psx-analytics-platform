---
description: Main project rules and architecture guidelines for PSX Analytics Platform
globs: ["**/*"]
alwaysApply: true
---

# PSX Analytics Platform - Cursor Rules

## Project Overview
Building the world's best analytical platform for Pakistan Stock Exchange (PSX) with Go backend and TypeScript frontend.

## Architecture Principles
- **Vertical Slice Architecture**: Organize by business capabilities, not technical layers
- **Incremental Value Delivery**: Each slice delivers complete business value
- **Contract-First Development**: OpenAPI schemas drive development
- **Test-Driven Development**: 100% passing behavioral unit tests for each slice
- **Microservices**: Independent, deployable services with clear boundaries

## Technology Stack
- **Backend**: Go with go-zero framework, sqlx, PostgreSQL
- **Frontend**: TypeScript with React, modern tooling
- **API**: OpenAPI 3.0 specification with code generation
- **Testing**: Comprehensive unit and integration tests
- **Database**: PostgreSQL with proper migrations and connection pooling

## Code Organization
```
psx-analytics/
├── api/                    # OpenAPI specifications
├── backend/               # Go microservices
│   ├── cmd/              # Service entry points
│   ├── internal/         # Private application code
│   ├── pkg/              # Public packages
│   └── scripts/          # Build and deployment scripts
├── frontend/              # TypeScript React application
│   ├── src/              # Source code
│   ├── public/           # Static assets
│   └── tests/            # Test files
├── shared/                # Shared types and utilities
└── docs/                  # Documentation
```

## Development Standards
- **Go**: Follow Go best practices, use gofmt, golint, go vet
- **TypeScript**: Strict mode, ESLint, Prettier, no any types
- **Testing**: 100% test coverage for business logic, 90%+ overall
- **Documentation**: Comprehensive API docs, inline code comments
- **Error Handling**: Proper error wrapping, meaningful error messages
- **Logging**: Structured logging with appropriate levels
- **Security**: Input validation, SQL injection prevention, authentication

## Vertical Slices
Each slice should be a complete, deployable unit with:
- **API Layer**: OpenAPI specification and generated code
- **Business Logic**: Core domain logic and business rules
- **Data Access**: Database models, repositories, migrations
- **Tests**: Unit tests covering all business scenarios
- **Documentation**: API docs, usage examples

## Definition of Done
- [ ] OpenAPI specification complete and validated
- [ ] Backend service implemented with go-zero
- [ ] Database models and migrations created
- [ ] Frontend components implemented
- [ ] 100% passing behavioral unit tests
- [ ] Integration tests passing
- [ ] API documentation generated
- [ ] Code reviewed and approved
- [ ] Performance benchmarks met
- [ ] Security review completed

## Naming Conventions
- **Go**: camelCase for variables, PascalCase for exported names
- **TypeScript**: camelCase for variables, PascalCase for components
- **Database**: snake_case for tables and columns
- **Files**: kebab-case for file names
- **APIs**: RESTful endpoints with proper HTTP methods

## Testing Strategy
- **Unit Tests**: Test individual functions and methods
- **Integration Tests**: Test service interactions
- **Behavioral Tests**: Test complete user workflows
- **Performance Tests**: Load testing for critical endpoints
- **Security Tests**: Vulnerability scanning and penetration testing

## Code Quality
- **Linting**: Strict linting rules for both Go and TypeScript
- **Formatting**: Automatic code formatting on save
- **Type Safety**: Strong typing, no type assertions without validation
- **Error Handling**: Comprehensive error handling and logging
- **Performance**: Efficient algorithms, proper indexing, caching

## Security Requirements
- **Authentication**: JWT tokens with refresh mechanism
- **Authorization**: Role-based access control
- **Input Validation**: Validate all inputs, prevent injection attacks
- **Data Encryption**: Encrypt sensitive data at rest and in transit
- **Audit Logging**: Log all security-relevant events
- **Rate Limiting**: Prevent abuse and DoS attacks

## Performance Requirements
- **Response Time**: <100ms for API calls, <2s for page loads
- **Throughput**: Support 10,000+ concurrent users
- **Scalability**: Horizontal scaling capability
- **Caching**: Redis for frequently accessed data
- **Database**: Proper indexing, query optimization

## Deployment
- **Containerization**: Docker containers for all services
- **Orchestration**: Kubernetes for production, Docker Compose for development
- **CI/CD**: Automated testing, building, and deployment
- **Monitoring**: Health checks, metrics, alerting
- **Rollback**: Quick rollback capability for failed deployments